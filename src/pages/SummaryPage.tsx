import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { motion } from 'framer-motion';
import { ArrowLeft, Brain, ExternalLink, Share2, Download, Clock, CheckCircle, Baseline as Timeline, Layers } from 'lucide-react';
import { useTheme } from '../contexts/ThemeContext';
// @ts-ignore
import { generateSmartSummary, generateEventTimeline } from '../services/api/summarization.js';
// @ts-ignore
import { searchSearXNG } from '../services/api/searxng.js';

interface Article {
  id: string;
  title: string;
  description: string;
  url: string;
  urlToImage: string | null;
  publishedDate: string;
  source: string;
  category: string;
  summary?: any;
  timeline?: any;
  relatedArticles?: any[];
}

const SummaryPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { isDark } = useTheme();
  const [article, setArticle] = useState<Article | null>(null);
  const [loading, setLoading] = useState(true);
  const [loadingSummary, setLoadingSummary] = useState(false);
  const [loadingTimeline, setLoadingTimeline] = useState(false);
  const [activeTab, setActiveTab] = useState<'summary' | 'timeline' | 'related'>('summary');

  useEffect(() => {
    loadArticle();
  }, [id]);

  const loadArticle = async () => {
    setLoading(true);
    try {
      // In a real app, this would fetch from your database
      // For now, we'll simulate with search
      const mockArticle: Article = {
        id: id || '1',
        title: 'AI-Powered Intelligence Systems Achieve Breakthrough in Real-Time Analysis',
        description: 'Advanced artificial intelligence systems demonstrate unprecedented capabilities in processing and analyzing global information streams with remarkable accuracy and speed.',
        url: 'https://example.com/ai-breakthrough',
        urlToImage: 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=1200',
        publishedDate: new Date().toISOString(),
        source: 'Intelligence Network',
        category: 'technology'
      };

      setArticle(mockArticle);
      
      // Load summary and timeline
      await Promise.all([
        loadSummary(mockArticle),
        loadTimeline(mockArticle),
        loadRelatedArticles(mockArticle)
      ]);
    } catch (error) {
      console.error('Error loading article:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadSummary = async (article: Article) => {
    setLoadingSummary(true);
    try {
      const summary = await generateSmartSummary(article);
      setArticle(prev => prev ? { ...prev, summary } : null);
    } catch (error) {
      console.error('Summary loading error:', error);
    } finally {
      setLoadingSummary(false);
    }
  };

  const loadTimeline = async (article: Article) => {
    setLoadingTimeline(true);
    try {
      const timeline = await generateEventTimeline(article.title);
      setArticle(prev => prev ? { ...prev, timeline } : null);
    } catch (error) {
      console.error('Timeline loading error:', error);
    } finally {
      setLoadingTimeline(false);
    }
  };

  const loadRelatedArticles = async (article: Article) => {
    try {
      const searchResults = await searchSearXNG(`related to "${article.title}"`, ['news']);
      const relatedArticles = searchResults.results.slice(0, 5).map((result: any) => ({
        title: result.title,
        url: result.url,
        source: new URL(result.url).hostname,
        publishedDate: result.publishedDate || new Date().toISOString()
      }));
      setArticle(prev => prev ? { ...prev, relatedArticles } : null);
    } catch (error) {
      console.error('Related articles loading error:', error);
    }
  };

  const shareArticle = () => {
    if (navigator.share && article) {
      navigator.share({
        title: article.title,
        text: article.description,
        url: window.location.href
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
    }
  };

  const downloadSummary = () => {
    if (!article?.summary) return;

    const content = `# ${article.title}

## TL;DR
${article.summary.tldr}

## Key Points
${article.summary.keyPoints.map((point: string) => `- ${point}`).join('\n')}

## Context
${article.summary.context}

## Implications
${article.summary.implications}

## Trust Score
${article.summary.trustScore}%

---
Generated by RealityCheck AI
`;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `summary-${article.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  if (loading) {
    return (
      <div className={`min-h-screen pt-20 transition-colors duration-300 ${
        isDark ? 'bg-black' : 'bg-white'
      }`}>
        <div className="max-w-4xl mx-auto px-6 py-8">
          <div className="animate-pulse space-y-6">
            <div className={`h-8 rounded ${isDark ? 'bg-white/10' : 'bg-slate-200'}`}></div>
            <div className={`h-64 rounded-2xl ${isDark ? 'bg-white/10' : 'bg-slate-200'}`}></div>
            <div className="space-y-3">
              <div className={`h-4 rounded ${isDark ? 'bg-white/10' : 'bg-slate-200'}`}></div>
              <div className={`h-4 rounded w-3/4 ${isDark ? 'bg-white/10' : 'bg-slate-200'}`}></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!article) {
    return (
      <div className={`min-h-screen pt-20 transition-colors duration-300 ${
        isDark ? 'bg-black' : 'bg-white'
      }`}>
        <div className="max-w-4xl mx-auto px-6 py-8 text-center">
          <h1 className={`text-2xl font-bold mb-4 ${isDark ? 'text-white' : 'text-slate-900'}`}>
            Article Not Found
          </h1>
          <Link to="/discover" className="text-glow-purple hover:underline">
            Return to Discover
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen pt-20 transition-colors duration-300 ${
      isDark ? 'bg-black' : 'bg-white'
    }`}>
      <div className="max-w-6xl mx-auto px-6 py-8">
        {/* Breadcrumb */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <Link
            to="/discover"
            className={`inline-flex items-center space-x-2 text-sm font-medium transition-colors hover:text-glow-purple ${
              isDark ? 'text-slate-400' : 'text-slate-600'
            }`}
          >
            <ArrowLeft className="w-4 h-4" />
            <span>Back to Discover</span>
          </Link>
        </motion.div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            <motion.article
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`backdrop-blur-sm border rounded-3xl p-8 shadow-xl ${
                isDark
                  ? 'bg-white/5 border-white/10'
                  : 'bg-white border-slate-200'
              }`}
            >
              {/* Header */}
              <div className="mb-8">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center space-x-4">
                    <span className="px-3 py-1 rounded-full text-sm font-semibold bg-glow-purple/20 text-glow-purple">
                      {article.category.toUpperCase()}
                    </span>
                    <div className="flex items-center space-x-2">
                      <Clock className="w-4 h-4 text-glow-purple" />
                      <span className={`text-sm ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                        {new Date(article.publishedDate).toLocaleDateString()}
                      </span>
                    </div>
                  </div>

                  <div className="flex items-center space-x-2">
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={shareArticle}
                      className={`p-2 rounded-xl transition-all duration-300 ${
                        isDark
                          ? 'bg-white/10 text-white hover:bg-white/20'
                          : 'bg-slate-100 text-slate-600 hover:bg-slate-200'
                      }`}
                    >
                      <Share2 className="w-5 h-5" />
                    </motion.button>
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={downloadSummary}
                      className={`p-2 rounded-xl transition-all duration-300 ${
                        isDark
                          ? 'bg-white/10 text-white hover:bg-white/20'
                          : 'bg-slate-100 text-slate-600 hover:bg-slate-200'
                      }`}
                    >
                      <Download className="w-5 h-5" />
                    </motion.button>
                  </div>
                </div>

                <h1 className={`text-4xl font-bold font-display mb-6 leading-tight ${
                  isDark ? 'text-white' : 'text-slate-900'
                }`}>
                  {article.title}
                </h1>
              </div>

              {/* Featured Image */}
              {article.urlToImage && (
                <div className="mb-8">
                  <img
                    src={article.urlToImage}
                    alt={article.title}
                    className="w-full h-96 object-cover rounded-2xl"
                    onError={(e) => {
                      e.currentTarget.src = 'https://images.pexels.com/photos/518543/pexels-photo-518543.jpeg?auto=compress&cs=tinysrgb&w=1200&h=600&fit=crop';
                    }}
                  />
                </div>
              )}

              {/* Tabs */}
              <div className="flex space-x-1 mb-6">
                {[
                  { id: 'summary', name: 'Smart Summary', icon: Brain },
                  { id: 'timeline', name: 'Timeline', icon: Timeline },
                  { id: 'related', name: 'Related', icon: Layers }
                ].map((tab) => {
                  const Icon = tab.icon;
                  return (
                    <motion.button
                      key={tab.id}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setActiveTab(tab.id as any)}
                      className={`px-4 py-2 rounded-xl font-semibold transition-all duration-300 flex items-center space-x-2 ${
                        activeTab === tab.id
                          ? isDark
                            ? 'bg-glow-purple text-white'
                            : 'bg-purple-600 text-white'
                          : isDark
                            ? 'bg-white/10 text-slate-300 hover:bg-white/20'
                            : 'bg-slate-100 text-slate-600 hover:bg-slate-200'
                      }`}
                    >
                      <Icon className="w-4 h-4" />
                      <span>{tab.name}</span>
                    </motion.button>
                  );
                })}
              </div>

              {/* Tab Content */}
              <div className="min-h-[400px]">
                {activeTab === 'summary' && (
                  <div>
                    {loadingSummary ? (
                      <div className="text-center py-12">
                        <Brain className="w-12 h-12 text-glow-purple mx-auto mb-4 animate-pulse" />
                        <p className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-slate-900'}`}>
                          Generating Smart Summary...
                        </p>
                      </div>
                    ) : article.summary ? (
                      <div className="space-y-6">
                        {/* TL;DR */}
                        <div className={`p-6 rounded-2xl border ${
                          isDark
                            ? 'bg-glow-purple/10 border-glow-purple/20'
                            : 'bg-purple-50 border-purple-200'
                        }`}>
                          <h3 className={`font-bold mb-3 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                            TL;DR
                          </h3>
                          <p className={`leading-relaxed ${isDark ? 'text-slate-300' : 'text-slate-700'}`}>
                            {article.summary.tldr}
                          </p>
                        </div>

                        {/* Key Points */}
                        <div>
                          <h3 className={`font-bold mb-3 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                            Key Points
                          </h3>
                          <ul className="space-y-2">
                            {article.summary.keyPoints.map((point: string, index: number) => (
                              <li
                                key={index}
                                className={`flex items-start space-x-2 ${isDark ? 'text-slate-300' : 'text-slate-700'}`}
                              >
                                <CheckCircle className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" />
                                <span>{point}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        {/* Context & Implications */}
                        <div className="grid md:grid-cols-2 gap-6">
                          <div>
                            <h3 className={`font-bold mb-3 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                              Context
                            </h3>
                            <p className={`text-sm leading-relaxed ${isDark ? 'text-slate-300' : 'text-slate-700'}`}>
                              {article.summary.context}
                            </p>
                          </div>
                          <div>
                            <h3 className={`font-bold mb-3 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                              Implications
                            </h3>
                            <p className={`text-sm leading-relaxed ${isDark ? 'text-slate-300' : 'text-slate-700'}`}>
                              {article.summary.implications}
                            </p>
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <p className={`text-lg ${isDark ? 'text-white' : 'text-slate-900'}`}>
                          Summary not available
                        </p>
                      </div>
                    )}
                  </div>
                )}

                {activeTab === 'timeline' && (
                  <div>
                    {loadingTimeline ? (
                      <div className="text-center py-12">
                        <Timeline className="w-12 h-12 text-glow-purple mx-auto mb-4 animate-pulse" />
                        <p className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-slate-900'}`}>
                          Generating Timeline...
                        </p>
                      </div>
                    ) : article.timeline ? (
                      <div className="space-y-4">
                        {article.timeline.events.map((event: any, index: number) => (
                          <div key={index} className="flex space-x-4">
                            <div className="flex flex-col items-center">
                              <div className="w-3 h-3 bg-glow-purple rounded-full"></div>
                              {index < article.timeline.events.length - 1 && (
                                <div className="w-px h-16 bg-glow-purple/30 mt-2"></div>
                              )}
                            </div>
                            <div className="flex-1 pb-8">
                              <div className="flex items-center space-x-2 mb-2">
                                <span className={`text-sm font-medium ${isDark ? 'text-glow-purple' : 'text-purple-600'}`}>
                                  {new Date(event.date).toLocaleDateString()}
                                </span>
                              </div>
                              <h4 className={`font-semibold mb-1 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                                {event.title}
                              </h4>
                              <p className={`text-sm leading-relaxed ${isDark ? 'text-slate-300' : 'text-slate-700'}`}>
                                {event.description}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <p className={`text-lg ${isDark ? 'text-white' : 'text-slate-900'}`}>
                          Timeline not available
                        </p>
                      </div>
                    )}
                  </div>
                )}

                {activeTab === 'related' && (
                  <div>
                    {article.relatedArticles ? (
                      <div className="space-y-4">
                        {article.relatedArticles.map((related: any, index: number) => (
                          <a
                            key={index}
                            href={related.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className={`block p-4 rounded-2xl border transition-all duration-300 hover:scale-[1.02] ${
                              isDark
                                ? 'bg-white/5 border-white/10 hover:bg-white/10'
                                : 'bg-slate-50 border-slate-200 hover:bg-slate-100'
                            }`}
                          >
                            <h4 className={`font-semibold mb-2 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                              {related.title}
                            </h4>
                            <div className="flex items-center justify-between">
                              <span className={`text-sm ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                                {related.source}
                              </span>
                              <ExternalLink className="w-4 h-4" />
                            </div>
                          </a>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <p className={`text-lg ${isDark ? 'text-white' : 'text-slate-900'}`}>
                          Related articles not available
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>

              {/* External Link */}
              <div className="mt-8 pt-6 border-t border-white/10">
                <motion.a
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  href={article.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className={`inline-flex items-center space-x-2 px-6 py-3 rounded-2xl font-semibold transition-all duration-300 ${
                    isDark
                      ? 'bg-glow-purple/10 border border-glow-purple/20 text-glow-purple hover:bg-glow-purple/20'
                      : 'bg-purple-50 border border-purple-200 text-purple-700 hover:bg-purple-100'
                  }`}
                >
                  <span>Read Original Article</span>
                  <ExternalLink className="w-4 h-4" />
                </motion.a>
              </div>
            </motion.article>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Trust Score */}
            {article.summary && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                className={`backdrop-blur-sm border rounded-3xl p-6 shadow-xl ${
                  isDark
                    ? 'bg-white/5 border-white/10'
                    : 'bg-white border-slate-200'
                }`}
              >
                <h3 className={`font-bold mb-4 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                  Trust Analysis
                </h3>
                <div className="text-center">
                  <div className={`text-4xl font-bold mb-2 ${
                    article.summary.trustScore >= 90
                      ? 'text-green-400'
                      : article.summary.trustScore >= 70
                        ? 'text-yellow-400'
                        : 'text-red-400'
                  }`}>
                    {article.summary.trustScore}%
                  </div>
                  <p className={`text-sm ${isDark ? 'text-slate-400' : 'text-slate-600'}`}>
                    Trust Score
                  </p>
                </div>
              </motion.div>
            )}

            {/* Quick Actions */}
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.1 }}
              className={`backdrop-blur-sm border rounded-3xl p-6 shadow-xl ${
                isDark
                  ? 'bg-white/5 border-white/10'
                  : 'bg-white border-slate-200'
              }`}
            >
              <h3 className={`font-bold mb-4 ${isDark ? 'text-white' : 'text-slate-900'}`}>
                Quick Actions
              </h3>
              <div className="space-y-3">
                <button
                  onClick={shareArticle}
                  className={`w-full p-3 rounded-xl text-left transition-all duration-300 flex items-center space-x-3 ${
                    isDark
                      ? 'bg-white/10 hover:bg-white/20'
                      : 'bg-slate-100 hover:bg-slate-200'
                  }`}
                >
                  <Share2 className="w-4 h-4" />
                  <span>Share Article</span>
                </button>
                <button
                  onClick={downloadSummary}
                  className={`w-full p-3 rounded-xl text-left transition-all duration-300 flex items-center space-x-3 ${
                    isDark
                      ? 'bg-white/10 hover:bg-white/20'
                      : 'bg-slate-100 hover:bg-slate-200'
                  }`}
                >
                  <Download className="w-4 h-4" />
                  <span>Download Summary</span>
                </button>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SummaryPage;